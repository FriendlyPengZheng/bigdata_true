package ad.users;
import util.*;

import java.util.*;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

//import org.apache.commons.logging.LogFactory;
//import org.apache.commons.logging.Log;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapred.lib.*;
import org.apache.hadoop.mapred.join.*;
import org.apache.hadoop.mapreduce.Counter;

// get user's game login channel, gameid == -1 for all game
// output::= gameid,mimi \t tad
public class UserGameLogin extends Configured implements Tool {

    public static class Map extends MapReduceBase
            implements Mapper<LongWritable, Text, Text, Text>
    {
        private JobConf jobConf = null;
        private Text realKey = new Text();
        private Text loginAd = new Text();
        //private AdParser adp = new AdParser();
        public void configure(JobConf job) {
            this.jobConf = job;
        }

        public void map(LongWritable key, Text value,
                OutputCollector<Text,Text> output, Reporter reporter) 
            throws IOException  
        {
            // login format ::= timestamp mimi tad gameid idc ip
            String line = value.toString();
            String [] items = line.split("\t", -1);
            if (items.length != 6) {
                System.err.printf("error format: %s\n", line);
                return;
            }

            loginAd.set(items[2]);

            // output format ::= gameid,mimi tad
            realKey.set(String.format("%s,%s", items[3], items[1]));
            output.collect(realKey, loginAd);

            realKey.set(String.format("-1,%s", items[1]));
            output.collect(realKey, loginAd);
        }
    }

    public static class Reduce extends MapReduceBase
            implements Reducer<Text, Text, Text, Text>
    {
        private Text realValue = new Text();
        private HashMap<String, Integer> tadcount = new HashMap<String, Integer>();

        public void reduce(Text key, Iterator<Text> values,
                OutputCollector<Text,Text> output, Reporter reporter) throws IOException {
            tadcount.clear();
            while (values.hasNext()) {
                String tad = values.next().toString();
                if (tadcount.containsKey(tad)) {
                    tadcount.put(tad, tadcount.get(tad) + 1);
                } else {
                    tadcount.put(tad, 1);
                }
            }

            // fetch only one ad for [gameid,mimi] tuple
            // choose the most used tad
            String onetad = null;
            int Max = 0; // for compare
            Set<String> ts = tadcount.keySet();
            Iterator<String> tsit = ts.iterator();
            while (tsit.hasNext()) {
                String tmp = tsit.next();
                int count = tadcount.get(tmp);
                if (count > Max || 
                        (count == Max && ("unknown".equals(onetad) || "none".equals(onetad)))) {
                    onetad = tmp;
                    Max = count;
                }
            }
            realValue.set(onetad);
            output.collect(key, realValue);
        }
    }

    public int run(String[] args) throws Exception {
        // final Log LOG = LogFactory.getLog("main-test");

        String clsName = this.getClass().getName();
        if (args.length < 2) {
            System.out.printf("Usage: %s inputs... output\n\n"+
                    "\tpreprocess user login <gameid,mimi\ttad>\n\n" , clsName);
            System.exit(-1);
        }

        Configuration conf = getConf();
        JobConf job = new JobConf(conf, getClass());
        String jarName = job.get("user.jar.name", "AdsMon.jar");
        job.setJar(jarName);
        Path outPath = new Path(args[args.length - 1]);
        job.setJobName(String.format("%s/%s", clsName, outPath.getName()));

        for (int i = 0 ; i < args.length - 1 ; ++i) {
            if (!MiscUtil.pathExist(args[i], conf)) {
                continue;
            }
            System.out.printf("add path: %s\n", args[i]);
            FileInputFormat.addInputPaths(job, args[i]);
        }

        // set input format
        job.setInputFormat(TextInputFormat.class);

        job.setMapperClass(Map.class);
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(Text.class);

        job.setReducerClass(Reduce.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        // set output format
        job.setOutputFormat(TextOutputFormat.class);
        FileOutputFormat.setOutputPath(job, outPath);

        // set Partion and Group
        //job.setPartitionerClass(TextPartitioner.class);
        //job.setGroupingComparatorClass(TextComparator.class);
        //job.setNumMapTasks(1);
        int reduceNum = job.getInt("mapred.reduce.tasks", 0);
        System.out.printf("mapred.reduce.tasks = %d\n", reduceNum);
        job.setNumReduceTasks(reduceNum);

        JobClient.runJob(job);

        return 0;
    }

    public static void main(String args[]) throws Exception
    {
        int ret = ToolRunner.run(new Configuration(), new UserGameLogin(), args);
        System.exit(ret);
    }
}
